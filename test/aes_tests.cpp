#include <cstddef>
#include <string>
#include <vector>
#include "catch2/catch.hpp"
#include "aes.hpp"

TEST_CASE("AES", "[aes]")
{
    constexpr std::array<std::uint8_t, 32> key{
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
    };

    constexpr std::array<std::uint8_t, 16> initVector{
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    };

    SECTION("ECB")
    {
        const struct final
        {
            std::vector<std::uint8_t> data;
            std::vector<std::uint8_t> result;
        } testCasesEcb[] = {
            {{}, {}},
            {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {0xF2, 0x90, 0x0, 0xB6, 0x2A, 0x49, 0x9F, 0xD0, 0xA9, 0xF3, 0x9A, 0x6A, 0xDD, 0x2E, 0x77, 0x80}},
            {{'T', 'e', 's', 't', ' ', '1', '2', '!'}, {0x14, 0x8C, 0x38, 0x74, 0x56, 0xF9, 0x88, 0xAE, 0x89, 0xE6, 0x36, 0x48, 0xC2, 0xC1, 0xD2, 0x3B}},
            {{'T', 'e', 's', 't', ' ', '1', '2', '!', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '.'}, {0xA, 0x47, 0x3A, 0xA5, 0xAC, 0x90, 0x6E, 0xA, 0xB4, 0x4E, 0xB8, 0xEE, 0x32, 0x53, 0x18, 0xA2, 0xC2, 0x51, 0x96, 0xD2, 0x7C, 0xA7, 0x9D, 0xB7, 0x73, 0xA1, 0x9, 0x94, 0x7D, 0x7A, 0x4F, 0x45}}
        };

        for (const auto& testCase : testCasesEcb)
        {
            const auto e = aes::encryptEcb<256>(testCase.data, key);
            REQUIRE(e == testCase.result);

            const auto d = aes::decryptEcb<256>(e, key);
            REQUIRE(std::equal(testCase.data.begin(), testCase.data.end(), d.begin()));
        }
    }

    SECTION("CBC")
    {
        const struct final
        {
            std::vector<std::uint8_t> data;
            std::vector<std::uint8_t> result;
        } testCasesCbc[] = {
            {{}, {}},
            {{'T', 'e', 's', 't', ' ', '1', '2', '!'}, {0x9A, 0x10, 0x85, 0x12, 0x4D, 0x37, 0xA9, 0xF6, 0xDB, 0xA6, 0x2E, 0x5E, 0x97, 0x79, 0x41, 0x90}},
            {{'T', 'e', 's', 't', ' ', '1', '2', '!', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '.'}, {0x1, 0x3, 0x3E, 0xC1, 0xC3, 0x49, 0x9F, 0x87, 0x78, 0xE3, 0x8F, 0xB0, 0xC8, 0x46, 0xB2, 0x18, 0xDA, 0x47, 0xEB, 0xE9, 0xDF, 0x12, 0x95, 0x5, 0xEE, 0x87, 0x18, 0x81, 0xD3, 0xF4, 0xFF, 0xEA}}
        };

        for (const auto& testCase : testCasesCbc)
        {
            const auto e = aes::encryptCbc<256>(testCase.data, key, initVector);
            REQUIRE(e == testCase.result);

            const auto d = aes::decryptCbc<256>(e, key, initVector);
            REQUIRE(std::equal(testCase.data.begin(), testCase.data.end(), d.begin()));
        }
    }

    SECTION("CFB")
    {
        const struct final
        {
            std::vector<std::uint8_t> data;
            std::vector<std::uint8_t> result;
        } testCasesCfb[] = {
            {{}, {}},
            {{'T', 'e', 's', 't', ' ', '1', '2', '!'}, {0xBD, 0xFC, 0x97, 0x69, 0x6C, 0x96, 0x42, 0xFB, 0x53, 0x87, 0x11, 0x7B, 0x5D, 0x8F, 0x57, 0xEE}},
            {{'T', 'e', 's', 't', ' ', '1', '2', '!', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '.'}, {0xBD, 0xFC, 0x97, 0x69, 0x6C, 0x96, 0x42, 0xFB, 0x62, 0xB5, 0x22, 0x4F, 0x68, 0xB9, 0x60, 0xD6, 0xD0, 0x7C, 0xB4, 0x4B, 0xF5, 0xD5, 0xD5, 0xF3, 0x7D, 0x0B, 0xFC, 0xB3, 0xCB, 0xF3, 0x49, 0x94}}
        };

        for (const auto& testCase : testCasesCfb)
        {
            const auto e = aes::encryptCfb<256>(testCase.data, key, initVector);
            REQUIRE(e == testCase.result);

            const auto d = aes::decryptCfb<256>(e, key, initVector);
            REQUIRE(std::equal(testCase.data.begin(), testCase.data.end(), d.begin()));
        }
    }

    SECTION("Byte")
    {
        constexpr std::array<std::byte, 32> keyByte{
            std::byte(0x00), std::byte(0x01), std::byte(0x02), std::byte(0x03), std::byte(0x04), std::byte(0x05), std::byte(0x06), std::byte(0x07),
            std::byte(0x08), std::byte(0x09), std::byte(0x0A), std::byte(0x0B), std::byte(0x0C), std::byte(0x0D), std::byte(0x0E), std::byte(0x0F),
            std::byte(0x10), std::byte(0x11), std::byte(0x12), std::byte(0x13), std::byte(0x14), std::byte(0x15), std::byte(0x16), std::byte(0x17),
            std::byte(0x18), std::byte(0x19), std::byte(0x1A), std::byte(0x1B), std::byte(0x1C), std::byte(0x1D), std::byte(0x1E), std::byte(0x1F)
        };

        constexpr std::array<std::byte, 16> initVectorByte{
            std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF),
            std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF), std::byte(0xFF)
        };

        const struct final
        {
            std::vector<std::byte> data;
            std::vector<std::uint8_t> result;
        } testCasesByte = {
            {}, {}
        };

        const auto e = aes::encryptCfb<256>(testCasesByte.data, keyByte, initVectorByte);
        REQUIRE(e == testCasesByte.result);
    }
}
